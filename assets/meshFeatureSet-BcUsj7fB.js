import{z as E,ba as y,E as S,aJ as w,al as D,e5 as h,k as M}from"./index-D0xqwRGM.js";import{$ as d}from"./Mesh-DVWyCD9u.js";import{d as N}from"./georeference-Dm3_AE5a.js";import{o as F,i as T}from"./External-Db-bJ2Yp.js";import{s as I}from"./infoFor3D-DsOdlPuA.js";import"./imageUtils-D26mp1P1.js";import"./MeshLocalVertexSpace-B5HvH6Bh.js";import"./meshVertexSpaceUtils-Ry7pCEuz.js";import"./vec3-DFuvkkiz.js";import"./earcut-C9dYZeX3.js";import"./DoubleArray-Ci5KpbLl.js";import"./Indices-F453h3-o.js";import"./deduplicate-BNlEzTSK.js";import"./plane-CrMk1st1.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./quatf64-Bdb9ZJJK.js";import"./triangle-Ct6UbKAt.js";import"./Util-CZdoyR3s.js";import"./ObjectStack-gWCv-_0B.js";import"./lineSegment-MIBYOwEw.js";import"./basicInterfaces-GbxEOYtk.js";import"./VertexAttribute-BlT9lbVY.js";import"./quat-sJ5PpobK.js";import"./computeTranslationToOriginAndRotation-Cfe87UIV.js";import"./BufferView-Y46uG7VX.js";const l=()=>M.getLogger("esri.rest.support.meshFeatureSet");function at(t,e,r){const o=r.features;r.features=[],delete r.geometryType;const n=E.fromJSON(r);if(n.geometryType="mesh",!r.assetMaps)return n;const s=b(e,r.assetMaps),i=t.sourceSpatialReference??y.WGS84,p=r.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?x(a.includes("*")?null:new Set(a)):()=>({});for(const m of o){const u=L(m,p,i,e,s);u!=null&&n.features.push(new S({geometry:u,attributes:f(m)}))}return n}function x(t){return({attributes:e})=>{if(!e)return{};if(!t)return e;for(const r in e)t.has(r)||delete e[r];return e}}function L(t,e,r,o,n){const s=t.attributes[e],i=n.get(s);if(i==null)return l().error("mesh-feature-set:asset-not-found","Service returned a feature which was not found in the asset map",t),null;if(!t.geometry)return l().error("mesh-feature-set:no-geometry","Service returned a feature without geometry",t),null;const p=O(t,r,o),a=w.fromJSON(t.geometry);a.spatialReference=r;const f=$(t.attributes,o),m=r.isGeographic?"local":"georeferenced",u=A(i);return u?d.createWithExternalSource(p,u,{extent:a,transform:f,vertexSpace:m}):d.createIncomplete(p,{extent:a,transform:f,vertexSpace:m})}function O({attributes:t},e,{transformFieldRoles:r}){const o=t[r.originX],n=t[r.originY],s=t[r.originZ];return new D({x:o,y:n,z:s,spatialReference:e})}function $(t,{transformFieldRoles:e}){return new N({translation:[t[e.translationX],-t[e.translationZ],t[e.translationY]],rotationAxis:[t[e.rotationX],-t[e.rotationZ],t[e.rotationY]],rotationAngle:t[e.rotationDeg],scale:[t[e.scaleX],t[e.scaleZ],t[e.scaleY]]})}var c;function b(t,e){const r=new Map;for(const o of e){const n=o.parentGlobalId;if(n==null)continue;const s=o.assetName,i=o.assetType,p=o.assetHash,a=o.assetURL,f=o.conversionStatus,m=o.seqNo,u=I(i,t.supportedFormats);if(!u){l().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const g=h(r,n,()=>({files:new Map}));h(g.files,s,()=>({name:s,type:i,mimeType:u,status:P(f),parts:[]})).parts[m]={hash:p,url:a}}return r}function A(t){const e=Array.from(t.files.values()),r=new Array;for(const o of e){if(o.status!==c.COMPLETED)return null;const n=new Array;for(const s of o.parts){if(!s)return null;n.push(new F(s.url,s.hash))}r.push(new T(o.name,o.mimeType,n))}return r}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{b as assetMapFromAssetMapsJSON,L as extractMesh,at as meshFeatureSetFromJSON};
